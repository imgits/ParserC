请输入要进行语法分析的C语言程序：
test.c
************************************分析表******************************

                          内容      描述        种别码  地址    行号
                           int    关键字        17              1
                          main    标志符        40      1       1
                             (    限界符        100             1
                             )    限界符        101             1
                             {    限界符        104             2
                           int    关键字        17              3
                             i    标志符        40      2       3
                             =    运算符        72              3
                             7      常量        51              3
                             ;    限界符        110             3
                           int    关键字        17              4
                             j    标志符        40      3       4
                             =    运算符        72              4
                             9      常量        51              4
                             ;    限界符        110             4
                           int    关键字        17              5
                             c    标志符        40      4       5
                             [    限界符        102             5
                            20      常量        51              5
                             ]    限界符        103             5
                             =    运算符        72              5
                             {    限界符        104             7
                             2      常量        51              7
                             ,    限界符        109             7
                            10      常量        51              7
                             ,    限界符        109             7
                            10      常量        51              7
                             ,    限界符        109             7
                            19      常量        51              7
                             ,    限界符        109             7
                             3      常量        51              7
                             ,    限界符        109             7
                             4      常量        51              7
                             ,    限界符        109             7
                             5      常量        51              7
                             ,    限界符        109             7
                             5      常量        51              7
                             ,    限界符        109             7
                            34      常量        51              7
                             ,    限界符        109             7
                             6      常量        51              7
                             ,    限界符        109             7
                            54      常量        51              7
                             ,    限界符        109             7
                            52      常量        51              7
                             ,    限界符        109             7
                            34      常量        51              7
                             ,    限界符        109             7
                            55      常量        51              7
                             ,    限界符        109             7
                            68      常量        51              7
                             ,    限界符        109             7
                            10      常量        51              7
                             ,    限界符        109             7
                            90      常量        51              7
                             ,    限界符        109             7
                            78      常量        51              7
                             ,    限界符        109             7
                            56      常量        51              7
                             ,    限界符        109             7
                            20      常量        51              7
                             }    限界符        105             7
                             ;    限界符        110             7
                           for    关键字        14              8
                             (    限界符        100             8
                             i    标志符        40      2       8
                             =    运算符        72              8
                             0      常量        51              8
                             ;    限界符        110             8
                             i    标志符        40      2       8
                             <    运算符        70              8
                            20      常量        51              8
                             ;    限界符        110             8
                             i    标志符        40      2       8
                            ++    运算符        74              8
                             )    限界符        101             8
                             {    限界符        104             9
                           for    关键字        14              10
                             (    限界符        100             10
                             j    标志符        40      3       10
                             =    运算符        72              10
                             i    标志符        40      2       10
                             +    运算符        68              10
                             1      常量        51              10
                             ;    限界符        110             10
                             j    标志符        40      3       10
                             <    运算符        70              10
                            20      常量        51              10
                             ;    限界符        110             10
                             j    标志符        40      3       10
                            --    运算符        75              10
                             )    限界符        101             10
                             {    限界符        104             11
                            if    关键字        16              12
                             (    限界符        100             12
                             j    标志符        40      3       12
                            ==    运算符        80              12
                            19      常量        51              12
                             )    限界符        101             12
                             {    限界符        104             13
                             c    标志符        40      4       14
                             [    限界符        102             14
                             i    标志符        40      2       14
                             ]    限界符        103             14
                             =    运算符        72              14
                             j    标志符        40      3       14
                             ;    限界符        110             14
                             }    限界符        105             15
                             }    限界符        105             16
                             }    限界符        105             17
                        printf    标志符        40      5       18
                             (    限界符        100             18
                             "    限界符        112             18
                   Hello world      常量        54              18
                             "    限界符        112             18
                             )    限界符        101             18
                             ;    限界符        110             18
                        return    关键字        20              19
                             0      常量        51              19
                             ;    限界符        110             19
                             }    限界符        105             20


************************************错误表******************************

      内容                          描述        类型    行号


************************************标志符表******************************

                          内容      描述        种别码  地址    行号
                          main    标志符        40      1       1
                             i    标志符        40      2       3
                             j    标志符        40      3       4
                             c    标志符        40      4       5
                             i    标志符        40      2       8
                             i    标志符        40      2       8
                             i    标志符        40      2       8
                             j    标志符        40      3       10
                             i    标志符        40      2       10
                             j    标志符        40      3       10
                             j    标志符        40      3       10
                             j    标志符        40      3       12
                             c    标志符        40      4       14
                             i    标志符        40      2       14
                             j    标志符        40      3       14
                        printf    标志符        40      5       18


************************************C语言文法******************************

<函数定义> -> <修饰词闭包> <类型> <变量> ( <参数声明> ) { <函数块> }
<修饰词闭包> -> <修饰词> <修饰词闭包>
<修饰词闭包> -> $
<修饰词> -> describe
<类型> -> type <取地址>
<取地址> -> <星号闭包>
<星号闭包> -> <星号> <星号闭包>
<星号闭包> -> $
<星号> -> *
<变量> -> <标志符> <数组下标>
<标志符> -> id
<数组下标> -> [ <因式> ]
<数组下标> -> $
<因式> -> ( <表达式> )
<因式> -> <变量>
<因式> -> <数字>
<数字> -> digit
<表达式> -> <因子> <项>
<因子> -> <因式> <因式递归>
<因式递归> -> * <因式> <因式递归>
<因式递归> -> / <因式> <因式递归>
<因式递归> -> $
<项> -> + <因子> <项>
<项> -> - <因子> <项>
<项> -> $
<参数声明> -> <声明> <声明闭包>
<参数声明> -> $
<声明> -> <修饰词闭包> <类型> <变量> <赋初值>
<赋初值> -> = <右值>
<赋初值> -> $
<右值> -> <表达式>
<右值> -> { <多个数据> }
<多个数据> -> <数字> <数字闭包>
<数字闭包> -> , <数字> <数字闭包>
<数字闭包> -> $
<声明闭包> -> , <声明> <声明闭包>
<声明闭包> -> $
<函数块> -> <声明语句闭包> <函数块闭包>
<声明语句闭包> -> <声明语句> <声明语句闭包>
<声明语句闭包> -> $
<声明语句> -> <声明> ;
<函数块闭包> -> <赋值函数> <函数块闭包>
<函数块闭包> -> <for循环> <函数块闭包>
<函数块闭包> -> <条件语句> <函数块闭包>
<函数块闭包> -> <函数返回> <函数块闭包>
<函数块闭包> -> $
<赋值函数> -> <变量> <赋值或函数调用>
<赋值或函数调用> -> = <右值> ;
<赋值或函数调用> -> ( <参数列表> ) ;
<参数列表> -> <参数> <参数闭包>
<参数闭包> -> , <参数> <参数闭包>
<参数闭包> -> $
<参数> -> <标志符>
<参数> -> <数字>
<参数> -> <字符串>
<字符串> -> string
<for循环> -> for ( <赋值函数> <逻辑表达式> ; <后缀表达式> ) { <函数块> }
<逻辑表达式> -> <表达式> <逻辑运算符> <表达式>
<逻辑运算符> -> <
<逻辑运算符> -> >
<逻辑运算符> -> ==
<逻辑运算符> -> !=
<后缀表达式> -> <变量> <后缀运算符>
<后缀运算符> -> ++
<后缀运算符> -> --
<条件语句> -> if ( <逻辑表达式> ) { <函数块> } <否则语句>
<否则语句> -> else { <函数块> }
<否则语句> -> $

************************************文法终结符******************************

( ) { } describe type * id [ ] digit / + - = , ; string for < > == != ++ -- if e
lse return

************************************文法非终结符******************************

<函数定义> <修饰词闭包> <类型> <变量> <参数声明> <函数块> <修饰词> <取地址> <星
号闭包> <星号> <标志符> <数组下标> <因式> <表达式> <数字> <因子> <项> <因式递归>
 <声明> <声明闭包> <赋初值> <右值> <多个数据> <数字闭包> <声明语句闭包> <函数块
闭包> <声明语句> <赋值函数> <for循环> <条件语句> <函数返回> <赋值或函数调用> <参
数列表> <参数> <参数闭包> <字符串> <逻辑表达式> <后缀表达式> <逻辑运算符> <后缀
运算符> <否则语句>


************************************First集******************************

First[<函数定义>] = describe type
First[<修饰词闭包>] = describe $
First[<类型>] = type
First[<变量>] = id
First[<参数声明>] = describe type $
First[<函数块>] = describe type id for if $
First[<修饰词>] = describe
First[<取地址>] = * $
First[<星号闭包>] = * $
First[<星号>] = *
First[<标志符>] = id
First[<数组下标>] = [ $
First[<因式>] = ( id digit
First[<表达式>] = ( id digit
First[<数字>] = digit
First[<因子>] = ( id digit
First[<项>] = + - $
First[<因式递归>] = * / $
First[<声明>] = describe type
First[<声明闭包>] = , $
First[<赋初值>] = = $
First[<右值>] = ( id digit {
First[<多个数据>] = digit
First[<数字闭包>] = , $
First[<声明语句闭包>] = describe type $
First[<函数块闭包>] = id for if $
First[<声明语句>] = describe type
First[<赋值函数>] = id
First[<for循环>] = for
First[<条件语句>] = if
First[<函数返回>] =
First[<赋值或函数调用>] = = (
First[<参数列表>] = id digit string
First[<参数>] = id digit string
First[<参数闭包>] = , $
First[<字符串>] = string
First[<逻辑表达式>] = ( id digit
First[<后缀表达式>] = id
First[<逻辑运算符>] = < > == !=
First[<后缀运算符>] = ++ --
First[<否则语句>] = else $

************************************Follow集******************************

Follow[<函数定义>] = #
Follow[<修饰词闭包>] = type
Follow[<类型>] = id
Follow[<变量>] = ( ] ) , ; < > == != + - * / = ++ --
Follow[<参数声明>] = )
Follow[<函数块>] = }
Follow[<修饰词>] = type describe
Follow[<取地址>] = id
Follow[<星号闭包>] = id
Follow[<星号>] = id *
Follow[<标志符>] = ( ] ) , ; < > == != + - * / = ++ -- [
Follow[<数组下标>] = ( ] ) , ; < > == != + - * / = ++ --
Follow[<因式>] = ] ) , ; < > == != + - * /
Follow[<表达式>] = ) , ; < > == !=
Follow[<数字>] = ] ) , ; < > == != + - * / }
Follow[<因子>] = ) , ; < > == != + -
Follow[<项>] = ) , ; < > == !=
Follow[<因式递归>] = ) , ; < > == != + -
Follow[<声明>] = ) , ;
Follow[<声明闭包>] = )
Follow[<赋初值>] = ) , ;
Follow[<右值>] = ) , ;
Follow[<多个数据>] = }
Follow[<数字闭包>] = }
Follow[<声明语句闭包>] = } id for if
Follow[<函数块闭包>] = }
Follow[<声明语句>] = } id for if describe type
Follow[<赋值函数>] = } id for if ( digit
Follow[<for循环>] = } id for if
Follow[<条件语句>] = } id for if
Follow[<函数返回>] = } id for if
Follow[<赋值或函数调用>] = } id for if ( digit
Follow[<参数列表>] = )
Follow[<参数>] = ) ,
Follow[<参数闭包>] = )
Follow[<字符串>] = ) ,
Follow[<逻辑表达式>] = ; )
Follow[<后缀表达式>] = )
Follow[<逻辑运算符>] = ( id digit
Follow[<后缀运算符>] = )
Follow[<否则语句>] = } id for if

************************************Select集******************************

Select[1] = describe type
Select[2] = describe
Select[3] = type
Select[4] = describe
Select[5] = type
Select[6] = * id
Select[7] = *
Select[8] = id
Select[9] = *
Select[10] = id
Select[11] = id
Select[12] = [
Select[13] = ( ] ) , ; < > == != + - * / = ++ --
Select[14] = (
Select[15] = id
Select[16] = digit
Select[17] = digit
Select[18] = ( id digit
Select[19] = ( id digit
Select[20] = *
Select[21] = /
Select[22] = ) , ; < > == != + -
Select[23] = +
Select[24] = -
Select[25] = ) , ; < > == !=
Select[26] = describe type
Select[27] = )
Select[28] = describe type
Select[29] = =
Select[30] = ) , ;
Select[31] = ( id digit
Select[32] = {
Select[33] = digit
Select[34] = ,
Select[35] = }
Select[36] = ,
Select[37] = )
Select[38] = describe type id for if }
Select[39] = describe type
Select[40] = } id for if
Select[41] = describe type
Select[42] = id
Select[43] = for
Select[44] = if
Select[45] =
Select[46] = }
Select[47] = id
Select[48] = =
Select[49] = (
Select[50] = id digit string
Select[51] = ,
Select[52] = )
Select[53] = id
Select[54] = digit
Select[55] = string
Select[56] = string
Select[57] = for
Select[58] = ( id digit
Select[59] = <
Select[60] = >
Select[61] = ==
Select[62] = !=
Select[63] = id
Select[64] = ++
Select[65] = --
Select[66] = if
Select[67] = else
Select[68] = } id for if
